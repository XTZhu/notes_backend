{"version":3,"sources":["compontens/Note.js","compontens/Notification.js","services/node.js","App.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","style","label","important","className","content","fontSize","onClick","Notification","message","nonExisting","id","date","axios","get","then","res","data","concat","newObject","post","put","Footer","color","fontStyle","textAlign","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","NoteServices","initalData","notesToshow","filter","length","map","key","background","find","n","changedNote","response","catch","error","setTimeout","onSubmit","event","preventDefault","console","log","target","noteObject","Date","toISOString","Math","random","value","onChange","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57c7a24f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance, style }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li style={{ ...style }} className=\"d-flex justify-content-between mt-1\">\n      {note.content}\n      <button\n        style={{ fontSize: 10 }}\n        className=\"btn-sm btn-primary\"\n        onClick={toggleImportance}\n      >\n        {label}\n      </button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  // simulate error\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  const res = axios.get(baseUrl).then((res) => res.data.concat(nonExisting));\n  return res;\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject).then((res) => res.data);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject).then((res) => res.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Note from \"./compontens/Note\";\nimport Notification from \"./compontens/Notification\";\nimport NoteServices from \"./services/node\";\n\nconst Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 14,\n    textAlign: \"center\",\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020 &\n        zwz\n      </em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const hook = () => {\n    NoteServices.getAll().then((initalData) => {\n      setNotes(initalData);\n    });\n  };\n\n  useEffect(hook, []);\n\n  const notesToshow = showAll ? notes : notes.filter((note) => note.important);\n\n  // add note func\n  const addNote = (event) => {\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    NoteServices.create(noteObject).then((res) => {\n      setNotes(notes.concat(res));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  // change importantce\n  const toggleImportance = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    NoteServices.update(id, changedNote)\n      .then((response) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : response)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  return (\n    <div>\n      <h1>notes</h1>\n      {errorMessage && errorMessage.length > 0 && (\n        <Notification message={errorMessage} />\n      )}\n      <div>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => setShowAll(!showAll)}\n        >\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToshow.map((note) => (\n          <Note\n            key={note.id}\n            style={{ background: note.important ? \"#c3707040\" : \"#54ab5440\" }}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n          />\n        ))}\n        <form onSubmit={addNote}>\n          <div className=\"form-group\">\n            <input\n              className=\"input m-t-5\"\n              value={newNote}\n              onChange={handleNoteChange}\n            />\n          </div>\n          <button className=\"btn btn-primary\" type=\"submit\">\n            save\n          </button>\n        </form>\n      </ul>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}